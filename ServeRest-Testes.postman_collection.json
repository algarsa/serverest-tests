{
	"info": {
		"_postman_id": "50847a19-b6e4-47a9-b95a-2a5a42f0f2c9",
		"name": "ServeRest-Testes",
		"description": "**O ServeRest é uma API REST gratuita que simula uma loja virtual com intuito de servir de material de estudos de testes de API.**\n\n**Não deixe de seguir o [autor do projeto](https://github.com/PauloGoncalvesBH) e deixar um star no repositório: [github.com/ServeRest/ServeRest](https://github.com/ServeRest/ServeRest)**\n\nEssa página documenta todas as rotas e como acessá-las. Para mais detalhes do ServeRest (como executar localmente utilizando Docker ou NPM, alterar timeout de autenticação, etc) acesse [o repositório do ServeRest](https://github.com/serverest/serverest).\n\nEstá utilizando Postman? Importe o [JSON do Swagger](https://raw.githubusercontent.com/ServeRest/ServeRest/trunk/docs/swagger.json) para ter acesso às collections.\n\nVai fazer teste de carga? Leia a seção '[Teste de Carga](https://github.com/ServeRest/ServeRest#teste-de-carga)'.\n\n\nMuito obrigado ♥ a todos que apoiam o projeto [financeiramente](https://opencollective.com/serverest#section-contributors) ou [com código, ideias e divulgação](https://github.com/ServeRest/ServeRest#contribuidores-), graças a vocês **mais de R$ 2000,00 foram doados para a ONG [Todas as letras](https://todasasletras.org/)** até o momento.\n\nO ServeRest possui um front, com status em beta, não deixe de conhecer: [front.serverest.dev](https://front.serverest.dev).\n\nPrecisa de apoio? [Abra uma issue](https://github.com/ServeRest/ServeRest/issues) ou contate o mantenedor do projeto:\n\n\nContact Support:\n Name: Paulo Gonçalves",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20947458"
	},
	"item": [
		{
			"name": "Testes de usuário - Sucesso",
			"item": [
				{
					"name": "1 - Listar usuários cadastrados",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code 200\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response content type\r",
									"pm.test('Content-Type is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"// Test for quantity field\r",
									"pm.test('Quantity field exists and is a number', () => {\r",
									"    pm.expect(response).to.have.property('quantidade');\r",
									"    pm.expect(response.quantidade).to.be.a('number');\r",
									"});\r",
									"\r",
									"// Test for usuarios array\r",
									"pm.test('Usuarios is an array', () => {\r",
									"    pm.expect(response).to.have.property('usuarios');\r",
									"    pm.expect(response.usuarios).to.be.an('array');\r",
									"    pm.expect(response.usuarios.length).to.be.greaterThan(0); // Ensure array is not empty\r",
									"\r",
									"    // Check each usuario object in the usuarios array\r",
									"    response.usuarios.forEach(usuario => {\r",
									"        pm.expect(usuario).to.have.all.keys('nome', 'email', 'password', 'administrador', '_id');\r",
									"        pm.expect(usuario.nome).to.be.a('string');\r",
									"        pm.expect(usuario.email).to.be.a('string');\r",
									"        pm.expect(usuario.password).to.be.a('string');\r",
									"        pm.expect(usuario.administrador).to.be.a('string');\r",
									"        pm.expect(usuario._id).to.be.a('string');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							],
							"query": [
								{
									"key": "nome",
									"value": "",
									"disabled": true
								},
								{
									"key": "email",
									"value": "",
									"disabled": true
								},
								{
									"key": "password",
									"value": "",
									"disabled": true
								},
								{
									"key": "administrador",
									"value": "",
									"disabled": true
								},
								{
									"key": "_id",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Lista de usuários",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios?_id=ipsum dolor elit id&nome=ipsum dolor elit id&email=ipsum dolor elit id&password=ipsum dolor elit id&administrador=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "nome",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "email",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "password",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "administrador",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"quantidade\": 1,\n  \"usuarios\": [\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    },\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "2 - Cadastrar usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for successful creation response\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test for message content\r",
									"pm.test(\"Message content is correct\", function () {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"// Test for Id meets requirements\r",
									"pm.test(\"Id meets requirements\", function () {\r",
									"    pm.expect(response).to.have.property('_id');\r",
									"    pm.expect(response._id).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(response._id.length).to.be.at.least(16, \"_id must be at least 16 characters long\");\r",
									"    pm.expect(response._id).to.match(/^[a-zA-Z0-9]+$/, \"_id must contain only alphanumeric characters\");\r",
									"});\r",
									"\r",
									"// Record variable _id\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"userId\", jsonData[\"_id\"]);\r",
									"\r",
									"// Get request body\r",
									"var requestBody = pm.request.body.raw;\r",
									"var jsonData2 = JSON.parse(requestBody);\r",
									"pm.environment.set(\"userName\", jsonData2[\"nome\"]);\r",
									"pm.environment.set(\"userEmail\", jsonData2[\"email\"]);\r",
									"pm.environment.set(\"userPassword\", jsonData2[\"password\"]);\r",
									"pm.environment.set(\"userAdministrador\", jsonData2[\"administrador\"]);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{$randomBoolean}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "3 - Buscar usuário por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code 200\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test for required fields\r",
									"pm.test(\"Response has required fields\", function () {    \r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response).to.have.all.keys('nome', 'email', 'password', 'administrador', '_id');\r",
									"});\r",
									"\r",
									"// Test for Get user by id\r",
									"pm.test(\"Id meets expect id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectId = pm.environment.get(\"userId\");\r",
									"    pm.expect(jsonData._id).to.equal(expectId);\r",
									"});\r",
									"\r",
									"// Test for Get user by name\r",
									"pm.test(\"Name meets expect name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectName = pm.environment.get(\"userName\");\r",
									"    pm.expect(jsonData.nome).to.equal(expectName);\r",
									"});\r",
									"\r",
									"// Test for Get user by email\r",
									"pm.test(\"Email meets expect email\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectEmail = pm.environment.get(\"userEmail\");\r",
									"    pm.expect(jsonData.email).to.equal(expectEmail);\r",
									"});\r",
									"\r",
									"// Test for Get user by password\r",
									"pm.test(\"Password meets expect password\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectPassword = pm.environment.get(\"userPassword\");\r",
									"    pm.expect(jsonData.password).to.equal(expectPassword);\r",
									"});\r",
									"\r",
									"// Test for Get user by administrador\r",
									"pm.test(\"Administrador meets expect administrador value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectAdministrador = pm.environment.get(\"userAdministrador\");\r",
									"    pm.expect(jsonData.administrador).to.equal(expectAdministrador);\r",
									"});\r",
									"\r",
									"// Test for email format\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response.email).to.exist;\r",
									"    pm.expect(response.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
									"});\r",
									"\r",
									"// Test for password length\r",
									"pm.test(\"Password meets security requirements\", function () {    \r",
									"    pm.expect(response).to.have.property('password');\r",
									"    pm.expect(response.password).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(response.password.length).to.be.at.least(1, \"Password must be at least 1 characters long\");\r",
									"});\r",
									"\r",
									"// Test for response schema validation\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"    pm.expect(response).to.have.all.keys('nome', 'email', 'password', 'administrador', '_id');\r",
									"    pm.expect(response.nome).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(response.email).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(response.password).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(response.administrador).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(response._id).to.be.a('string').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "Usuário encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\",\n  \"_id\": \"0uxuPY0cbmQhpEz1\"\n}"
						},
						{
							"name": "Usuário não encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Usuário não encontrado\"\n}"
						}
					]
				},
				{
					"name": "4 - Realizar login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for content type\r",
									"pm.test('Content-Type is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"// Test for presence of message in response\r",
									"pm.test('Response has message', () => {\r",
									"    pm.expect(response.message).to.exist;\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal(\"Login realizado com sucesso\");\r",
									"});\r",
									"\r",
									"// Test for presence of authorization token\r",
									"pm.test('Response has authorization token', () => {\r",
									"    pm.expect(response.authorization).to.exist;\r",
									"    pm.expect(response.authorization).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
					},
					"response": [
						{
							"name": "Login realizado com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
						},
						{
							"name": "E-mail e/ou senha inválidos",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
						}
					]
				},
				{
					"name": "5 - Editar usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response body\r",
									"pm.test(\"Response body contains expected message\", () => {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal(\"Registro alterado com sucesso\");\r",
									"});\r",
									"\r",
									"// Get request body\r",
									"var requestBody = pm.request.body.raw;\r",
									"var jsonData2 = JSON.parse(requestBody);\r",
									"pm.environment.set(\"userName\", jsonData2[\"nome\"]);\r",
									"pm.environment.set(\"userEmail\", jsonData2[\"email\"]);\r",
									"pm.environment.set(\"userPassword\", jsonData2[\"password\"]);\r",
									"pm.environment.set(\"userAdministrador\", jsonData2[\"administrador\"]);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{$randomBoolean}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": "{{userId}}",
									"description": "(Required) ID do usuário"
								}
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
					},
					"response": [
						{
							"name": "Alterado com sucesso",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
						},
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "6 - Buscar usuário editado por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code 200 - User found\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test for required fields\r",
									"pm.test(\"Response has required fields\", function () {    \r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response).to.have.all.keys('nome', 'email', 'password', 'administrador', '_id');\r",
									"});\r",
									"\r",
									"// Test for Get user by id\r",
									"pm.test(\"Id meets expect id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectId = pm.environment.get(\"userId\");\r",
									"    pm.expect(jsonData._id).to.equal(expectId);\r",
									"});\r",
									"\r",
									"// Test for Get user by name\r",
									"pm.test(\"Name meets expect name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectName = pm.environment.get(\"userName\");\r",
									"    pm.expect(jsonData.nome).to.equal(expectName);\r",
									"});\r",
									"\r",
									"// Test for Get user by email\r",
									"pm.test(\"Email meets expect email\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectEmail = pm.environment.get(\"userEmail\");\r",
									"    pm.expect(jsonData.email).to.equal(expectEmail);\r",
									"});\r",
									"\r",
									"// Test for Get user by password\r",
									"pm.test(\"Password meets expect password\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectPassword = pm.environment.get(\"userPassword\");\r",
									"    pm.expect(jsonData.password).to.equal(expectPassword);\r",
									"});\r",
									"\r",
									"// Test for Get user by administrador\r",
									"pm.test(\"Administrador meets expect administrador value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectAdministrador = pm.environment.get(\"userAdministrador\");\r",
									"    pm.expect(jsonData.administrador).to.equal(expectAdministrador);\r",
									"});\r",
									"\r",
									"// Test for email format\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response.email).to.exist;\r",
									"    pm.expect(response.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
									"});\r",
									"\r",
									"// Test for password length\r",
									"pm.test(\"Password meets security requirements\", function () {    \r",
									"    pm.expect(response).to.have.property('password');\r",
									"    pm.expect(response.password).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(response.password.length).to.be.at.least(1, \"Password must be at least 1 characters long\");\r",
									"});\r",
									"\r",
									"// Test for response schema validation\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"    pm.expect(response).to.have.all.keys('nome', 'email', 'password', 'administrador', '_id');\r",
									"    pm.expect(response.nome).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(response.email).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(response.password).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(response.administrador).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(response._id).to.be.a('string').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "Usuário encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\",\n  \"_id\": \"0uxuPY0cbmQhpEz1\"\n}"
						},
						{
							"name": "Usuário não encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Usuário não encontrado\"\n}"
						}
					]
				},
				{
					"name": "7 - Excluir usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test for response body\r",
									"pm.test(\"Response body contains expected message\", () => {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal(\"Registro excluído com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": "{{userId}}",
									"description": "(Required) ID do usuário"
								}
							]
						},
						"description": "Não é permitido excluir usuário com carrinho."
					},
					"response": [
						{
							"name": "Registro excluído com sucesso | Nenhum registro excluído",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
						},
						{
							"name": "Usuário com carrinho cadastrado",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n  \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
						}
					]
				},
				{
					"name": "8 - Buscar usuário excluído por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code 400 - User not found\r",
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for the presence of the 'message' property\r",
									"pm.test(\"Response contains 'message' property\", () => {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal(\"Usuário não encontrado\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "Usuário encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\",\n  \"_id\": \"0uxuPY0cbmQhpEz1\"\n}"
						},
						{
							"name": "Usuário não encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Usuário não encontrado\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Teste de usuario com carrinho - Exceção",
			"item": [
				{
					"name": "1 - Cadastrar usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for successful creation response\r",
									"pm.test(\"Status code is 201 - Registration completed successfully\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test for message content\r",
									"pm.test(\"Message content is correct\", function () {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"// Test for Id meets requirements\r",
									"pm.test(\"Id meets requirements\", function () {\r",
									"    pm.expect(response).to.have.property('_id');\r",
									"    pm.expect(response._id).to.be.a('string').that.is.not.empty;\r",
									"    pm.expect(response._id.length).to.be.at.least(16, \"_id must be at least 16 characters long\");\r",
									"    pm.expect(response._id).to.match(/^[a-zA-Z0-9]+$/, \"_id must contain only alphanumeric characters\");\r",
									"});\r",
									"\r",
									"// Record variable _id\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"userId\", jsonData[\"_id\"]);\r",
									"\r",
									"// Get request body\r",
									"var requestBody = pm.request.body.raw;\r",
									"var jsonData2 = JSON.parse(requestBody);\r",
									"pm.environment.set(\"userEmail\", jsonData2[\"email\"]);\r",
									"pm.environment.set(\"userPassword\", jsonData2[\"password\"]);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"true\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "2 - Realizar login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response body\r",
									"pm.test('Response body contains expected message', () => {\r",
									"    pm.expect(response.message).to.eql('Login realizado com sucesso');\r",
									"});\r",
									"\r",
									"// Test for presence of authorization token\r",
									"pm.test('Response has authorization token', () => {\r",
									"    pm.expect(response.authorization).to.exist;\r",
									"    pm.expect(response.authorization).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Record variable authorization\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"userAuthorization\", jsonData[\"authorization\"]);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
					},
					"response": [
						{
							"name": "Login realizado com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
						},
						{
							"name": "E-mail e/ou senha inválidos",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
						}
					]
				},
				{
					"name": "3 - Cadastrar produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"// Test for message existence\r",
									"pm.test(\"Response contains a message\", () => {\r",
									"    pm.expect(response.message).to.exist;\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"// Test for _id existence\r",
									"pm.test(\"Response contains an _id\", () => {\r",
									"    pm.expect(response._id).to.exist;\r",
									"    pm.expect(response._id).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Record variable _id\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"productId\", jsonData[\"_id\"]);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{userAuthorization}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomProductName}}\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							]
						},
						"description": "Não é permitido cadastrar produto com nome já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "Já existe produto com esse nome",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Já existe produto com esse nome\"\n}"
						},
						{
							"name": "Token ausente, inválido ou expirado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
						},
						{
							"name": "Rota exclusiva para administradores (`administrador = true`)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Rota exclusiva para administradores\"\n}"
						}
					]
				},
				{
					"name": "4 - Cadastrar carrinho",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Status code test\r",
									"pm.test('Status code is 201', () => {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"// Response body structure tests\r",
									"pm.test('Response body has message property', () => {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal(\"Cadastro realizado com sucesso\");\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{userAuthorization}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carrinhos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carrinhos"
							]
						},
						"description": "O carrinho é vinculado ao usuário do token enviado no header `Authorization`, sendo possível cadastrar apenas 1 carrinho por usuário.\nAo cadastrar carrinho com sucesso é feita a redução da quantidade no cadastro de cada produto inserido no carrinho.\n"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"nostrud ut\",\n    \"quantidade\": -62363362\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "Algo deu errado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"nostrud ut\",\n    \"quantidade\": -62363362\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Não é permitido possuir produto duplicado | Não é permitido ter mais de 1 carrinho | Produto não encontrado | Produto não possui quantidade suficiente\"\n}"
						},
						{
							"name": "Token ausente, inválido ou expirado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"produtos\": {\n    \"idProduto\": \"nostrud ut\",\n    \"quantidade\": -62363362\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/carrinhos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
						}
					]
				},
				{
					"name": "5 - Excluir usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"// Test for message content\r",
									"pm.test('Message content is correct', () => {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal(\"Não é permitido excluir usuário com carrinho cadastrado\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": "{{userId}}",
									"description": "(Required) ID do usuário"
								}
							]
						},
						"description": "Não é permitido excluir usuário com carrinho."
					},
					"response": [
						{
							"name": "Registro excluído com sucesso | Nenhum registro excluído",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
						},
						{
							"name": "Usuário com carrinho cadastrado",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n  \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Testes de usuário - Exceção",
			"item": [
				{
					"name": "Listar usuários cadastrados - Email em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 400', function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"// Test for response body structure\r",
									"pm.test('Response body has email error message', function () {\r",
									"    pm.expect(response.email).to.exist;\r",
									"    pm.expect(response.email).to.be.a('string');\r",
									"    pm.expect(response.email).to.include('deve ser uma string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios?nome=&email=&password=&administrador={{$randomBoolean}}&_id=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							],
							"query": [
								{
									"key": "nome",
									"value": ""
								},
								{
									"key": "email",
									"value": ""
								},
								{
									"key": "password",
									"value": ""
								},
								{
									"key": "administrador",
									"value": "{{$randomBoolean}}"
								},
								{
									"key": "_id",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"name": "Lista de usuários",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios?_id=ipsum dolor elit id&nome=ipsum dolor elit id&email=ipsum dolor elit id&password=ipsum dolor elit id&administrador=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "nome",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "email",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "password",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "administrador",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"quantidade\": 1,\n  \"usuarios\": [\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    },\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Listar usuários cadastrados - Email inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 400', function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"// Test for response body structure\r",
									"pm.test('Response body has email error message', function () {\r",
									"    pm.expect(response.email).to.exist;\r",
									"    pm.expect(response.email).to.be.a('string');\r",
									"    pm.expect(response.email).to.include('deve ser um email válido');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios?nome=&email={{$randomAlphaNumeric}}&password=&administrador={{$randomBoolean}}&_id=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							],
							"query": [
								{
									"key": "nome",
									"value": ""
								},
								{
									"key": "email",
									"value": "{{$randomAlphaNumeric}}"
								},
								{
									"key": "password",
									"value": ""
								},
								{
									"key": "administrador",
									"value": "{{$randomBoolean}}"
								},
								{
									"key": "_id",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"name": "Lista de usuários",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios?_id=ipsum dolor elit id&nome=ipsum dolor elit id&email=ipsum dolor elit id&password=ipsum dolor elit id&administrador=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "nome",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "email",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "password",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "administrador",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"quantidade\": 1,\n  \"usuarios\": [\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    },\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Listar usuários cadastrados - Administrador em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 400', function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"// Test for response body structure\r",
									"pm.test('Response body has administrador error message', function () {\r",
									"    pm.expect(response.administrador).to.exist;\r",
									"    pm.expect(response.administrador).to.be.a('string');\r",
									"    pm.expect(response.administrador).to.equal(\"administrador deve ser 'true' ou 'false'\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios?nome=&email={{$randomEmail}}&password=&administrador=&_id=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							],
							"query": [
								{
									"key": "nome",
									"value": ""
								},
								{
									"key": "email",
									"value": "{{$randomEmail}}"
								},
								{
									"key": "password",
									"value": ""
								},
								{
									"key": "administrador",
									"value": ""
								},
								{
									"key": "_id",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"name": "Lista de usuários",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios?_id=ipsum dolor elit id&nome=ipsum dolor elit id&email=ipsum dolor elit id&password=ipsum dolor elit id&administrador=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "nome",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "email",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "password",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "administrador",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"quantidade\": 1,\n  \"usuarios\": [\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    },\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Listar usuários cadastrados - Administrador inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 400', function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"// Test for response body structure\r",
									"pm.test('Response body has administrador error message', function () {\r",
									"    pm.expect(response.administrador).to.exist;\r",
									"    pm.expect(response.administrador).to.be.a('string');\r",
									"    pm.expect(response.administrador).to.equal(\"administrador deve ser 'true' ou 'false'\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios?nome=&email={{$randomEmail}}&password=&administrador=123&_id=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							],
							"query": [
								{
									"key": "nome",
									"value": ""
								},
								{
									"key": "email",
									"value": "{{$randomEmail}}"
								},
								{
									"key": "password",
									"value": ""
								},
								{
									"key": "administrador",
									"value": "123"
								},
								{
									"key": "_id",
									"value": ""
								}
							]
						}
					},
					"response": [
						{
							"name": "Lista de usuários",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios?_id=ipsum dolor elit id&nome=ipsum dolor elit id&email=ipsum dolor elit id&password=ipsum dolor elit id&administrador=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "nome",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "email",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "password",
											"value": "ipsum dolor elit id"
										},
										{
											"key": "administrador",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"quantidade\": 1,\n  \"usuarios\": [\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    },\n    {\n      \"nome\": \"Fulano da Silva\",\n      \"email\": \"beltrano@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\",\n      \"_id\": \"0uxuPY0cbmQhpEz1\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Cadastrar usuário com Sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for successful creation response\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Get request body\r",
									"var requestBody = pm.request.body.raw;\r",
									"var jsonData2 = JSON.parse(requestBody);\r",
									"pm.environment.set(\"userEmail\", jsonData2[\"email\"]);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{$randomBoolean}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Cadastrar usuário - Email já cadastrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test(\"Response message is present\", () => {\r",
									"    pm.expect(response.message).to.exist;\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal(\"Este email já está sendo usado\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{$randomBoolean}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Cadastrar usuário - Nome em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response body structure\r",
									"pm.test('Response body has expected properties', () => {\r",
									"    pm.expect(response).to.have.property('nome');\r",
									"    pm.expect(response.nome).to.be.a('string');\r",
									"    pm.expect(response.nome).to.equal('nome não pode ficar em branco');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{$randomBoolean}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Cadastrar usuário - Email em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response body structure\r",
									"pm.test('Response body has expected properties', () => {\r",
									"    pm.expect(response).to.have.property('email');\r",
									"    pm.expect(response.email).to.be.a('string');\r",
									"    pm.expect(response.email).to.equal('email não pode ficar em branco');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{$randomBoolean}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Cadastrar usuário - Email inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response body structure\r",
									"pm.test('Response body has expected properties', () => {\r",
									"    pm.expect(response).to.have.property('email');\r",
									"    pm.expect(response.email).to.be.a('string');\r",
									"    pm.expect(response.email).to.equal('email deve ser um email válido');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"teste\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{$randomBoolean}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Cadastrar usuário - Password em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response body structure\r",
									"pm.test('Response body has expected properties', () => {\r",
									"    pm.expect(response).to.have.property('password');\r",
									"    pm.expect(response.password).to.be.a('string');\r",
									"    pm.expect(response.password).to.equal('password não pode ficar em branco');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"\",\n  \"administrador\": \"{{$randomBoolean}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Cadastrar usuário - Administrador em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for 'administrador' error message\r",
									"pm.test(\"Error message for 'administrador' is present\", () => {\r",
									"    pm.expect(response.administrador).to.exist;\r",
									"    pm.expect(response.administrador).to.be.a('string');\r",
									"    pm.expect(response.administrador).to.equal(\"administrador deve ser 'true' ou 'false'\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Cadastrar usuário - Administrador inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for 'administrador' error message\r",
									"pm.test(\"Error message for 'administrador' is present\", () => {\r",
									"    pm.expect(response.administrador).to.exist;\r",
									"    pm.expect(response.administrador).to.be.a('string');\r",
									"    pm.expect(response.administrador).to.equal(\"administrador deve ser 'true' ou 'false'\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"teste\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado"
					},
					"response": [
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Buscar usuário não encontrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code 400 - User not found\r",
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"    \r",
									"});\r",
									"\r",
									"// Test for response body structure\r",
									"pm.test(\"Response body structure\", () => {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal(\"Usuário não encontrado\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios/syXtgARFXcfpl123",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"syXtgARFXcfpl123"
							]
						}
					},
					"response": [
						{
							"name": "Usuário encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\",\n  \"_id\": \"0uxuPY0cbmQhpEz1\"\n}"
						},
						{
							"name": "Usuário não encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Usuário não encontrado\"\n}"
						}
					]
				},
				{
					"name": "Buscar usuário com ID inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code 400 - Invalid id\r",
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test for response body structure\r",
									"pm.test(\"Response body structure\", () => {\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response.id).to.be.a('string');\r",
									"    pm.expect(response.id).to.equal(\"id deve ter exatamente 16 caracteres alfanuméricos\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios/123",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"123"
							]
						}
					},
					"response": [
						{
							"name": "Usuário encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\",\n  \"_id\": \"0uxuPY0cbmQhpEz1\"\n}"
						},
						{
							"name": "Usuário não encontrado",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Usuário não encontrado\"\n}"
						}
					]
				},
				{
					"name": "Realizar login - Email em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 400', function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"// Test for response body structure\r",
									"pm.test('Response body has email error message', function () {\r",
									"    pm.expect(response).to.have.property('email');\r",
									"    pm.expect(response.email).to.be.a('string');\r",
									"    pm.expect(response.email).to.equal('email não pode ficar em branco');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"\",\n  \"password\": \"{{userPassword}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
					},
					"response": [
						{
							"name": "Login realizado com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
						},
						{
							"name": "E-mail e/ou senha inválidos",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
						}
					]
				},
				{
					"name": "Realizar login - Email inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 401', function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"// Test for response body message\r",
									"pm.test('Response body contains message', function () {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal('Email e/ou senha inválidos');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
					},
					"response": [
						{
							"name": "Login realizado com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
						},
						{
							"name": "E-mail e/ou senha inválidos",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
						}
					]
				},
				{
					"name": "Realizar login - Senha inválida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 401', function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"// Test for response body message\r",
									"pm.test('Response body contains message', function () {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal('Email e/ou senha inválidos');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "A duração do token retornado em authorization é de 600 segundos (10 minutos). Caso esteja expirado irá receber status code 401 (Unauthorized).\n"
					},
					"response": [
						{
							"name": "Login realizado com sucesso",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Login realizado com sucesso\",\n  \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNTg5NzU4NzQ2LCJleHAiOjE1ODk3Njg3NDZ9.B6TASHV8k9xBerz4NSeFBlAZGSDhZlqESt767M0567I\"\n}"
						},
						{
							"name": "E-mail e/ou senha inválidos",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Email e/ou senha inválidos\"\n}"
						}
					]
				},
				{
					"name": "Editar usuário - Email já utilizado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 400', () => {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"// Test for response message\r",
									"pm.test('Response message is correct', () => {\r",
									"    pm.expect(response.message).to.exist;\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal('Este email já está sendo usado');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"{{$randomFullName}}\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{$randomPassword}}\",\n  \"administrador\": \"{{$randomBoolean}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": "{{userId}}",
									"description": "(Required) ID do usuário"
								}
							]
						},
						"description": "Não é permitido cadastrar usuário com email já utilizado.\nCaso não seja encontrado usuário com o ID informado é realizado novo cadastro ao invés de alteração.\n"
					},
					"response": [
						{
							"name": "Alterado com sucesso",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Registro alterado com sucesso\"\n}"
						},
						{
							"name": "Cadastro com sucesso",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Cadastro realizado com sucesso\",\n  \"_id\": \"jogfODIlXsqxNFS2\"\n}"
						},
						{
							"name": "E-mail já cadastrado",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "Excluir usuário - ID nulo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"// Test for status code\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test for response body\r",
									"pm.test('Response body contains correct message', () => {\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.expect(response.message).to.be.a('string');\r",
									"    pm.expect(response.message).to.equal(\"Nenhum registro excluído\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/usuarios/:_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								":_id"
							],
							"variable": [
								{
									"key": "_id",
									"value": "null",
									"description": "(Required) ID do usuário"
								}
							]
						},
						"description": "Não é permitido excluir usuário com carrinho."
					},
					"response": [
						{
							"name": "Registro excluído com sucesso | Nenhum registro excluído",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Registro excluído com sucesso | Nenhum registro excluído\"\n}"
						},
						{
							"name": "Usuário com carrinho cadastrado",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usuarios/:_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usuarios",
										":_id"
									],
									"variable": [
										{
											"key": "_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Não é permitido excluir usuário com carrinho cadastrado\",\n  \"idCarrinho\": \"qbMqntef4iTOwWfg\"\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}